generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// User model represents application users.
model User {
  id                        Int       @id @default(autoincrement())
  name                      String?
  email                     String    @unique
  password                  String
  emailVerified             Boolean   @default(false)
  otp                       String?
  refreshToken              String?
  passwordResetToken        String? // Stores the hashed reset token
  passwordResetTokenExpires DateTime? // Token expiration time
  profileImage              String? // URL of profile image
  createdAt                 DateTime  @default(now())
  updatedAt                 DateTime  @updatedAt

  // Relations
  userRoles UserRole[]
}

/// Role model defines user roles in the system (e.g., Admin, User).
model Role {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  rolePermissions RolePermission[]
  userRoles       UserRole[]
}

/// Permission model defines access control permissions (e.g., 'read', 'write').
model Permission {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  rolePermissions RolePermission[]
}

/// UserRole model maps users to their roles (many-to-many relationship).
model UserRole {
  id     String @id @default(cuid())
  userId Int // Foreign key to User
  roleId String // Foreign key to Role

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  role Role @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([userId, roleId]) // Prevent duplicate user-role assignments
  @@index([userId]) // Optimize queries filtering by userId
  @@index([roleId]) // Optimize queries filtering by roleId
}

/// RolePermission model maps roles to their permissions (many-to-many relationship).
model RolePermission {
  id           String @id @default(cuid())
  roleId       String // Foreign key to Role
  permissionId String // Foreign key to Permission

  // Relations
  role       Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@unique([roleId, permissionId]) // Prevent duplicate role-permission assignments
  @@index([roleId]) // Optimize queries filtering by roleId
  @@index([permissionId]) // Optimize queries filtering by permissionId
}

/// BusCompany model represents a bus company.
model BusCompany {
  id          Int        @id @default(autoincrement())
  name        String     @db.VarChar(100)
  contact     String?    @db.VarChar(100)
  address     String?    @db.VarChar(255)
  website     String?    @db.VarChar(255)
  phone       String?    @db.VarChar(20)
  email       String?    @db.VarChar(100)
  logo        String?    @db.VarChar(255)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  isActive    Boolean    @default(true)
  description String?    @db.Text
  busRoutes   BusRoute[]

  @@map("busCompany")
}

/// It contains information about the company and its bus routes.
model BusRoute {
  id          Int          @id @default(autoincrement())
  companyId   Int
  company     BusCompany   @relation(fields: [companyId], references: [id])
  routeName   String       @db.VarChar(100)
  startPoint  String       @db.VarChar(100)
  endPoint    String       @db.VarChar(100)
  startTime   DateTime     @db.Time()
  endTime     DateTime     @db.Time()
  serviceType String       @db.VarChar(50)
  active      Boolean      @default(true)
  routePoints RoutePoint[]

  @@map("busRoute")
}

/// RoutePoint model represents a point on a bus route.
model RoutePoint {
  id             Int      @id @default(autoincrement())
  routeId        Int
  route          BusRoute @relation(fields: [routeId], references: [id])
  pointName      String   @db.VarChar(100)
  sequenceNumber Int
  latitude       Decimal  @db.Decimal(10, 8)
  longitude      Decimal  @db.Decimal(11, 8)

  @@map("routePoints")
}
